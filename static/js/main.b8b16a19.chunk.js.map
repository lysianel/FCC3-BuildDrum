{"version":3,"sources":["shared/audioDatabase.js","components/DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["audioDatabase","id","keycode","audio","display","Display","props","key","DrumPadContainer","drumpads","map","pad","className","onClick","onKeyDown","toUpperCase","src","handleKeyDown","DrumMachine","state","selectedAudio","handleClick","bind","document","addEventListener","this","removeEventListener","event","databaseChecked","filter","track","keyCode","setState","playTrack","getElementById","target","getElementsByClassName","length","classList","remove","console","log","add","querySelector","play","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b8b16a19.chunk.js","sourcesContent":["export const audioDatabase =[\r\n\t{\r\n\t\tid:\"q\",\r\n\t\tkeycode:81,\r\n\t\taudio:\"https://raw.githubusercontent.com/lysianel/FCC3-BuildDrum/master/public/drumSoundtrack/CYCdh_ElecK03-ClHat.wav\",\r\n\t\tdisplay:\"Closed Hat\",\r\n\t},\r\n\t{\r\n\t\tid:\"w\",\r\n\t\tkeycode:87,\r\n\t\taudio:\"https://raw.githubusercontent.com/lysianel/FCC3-BuildDrum/master/public/drumSoundtrack/CYCdh_ElecK03-Clap01.wav\",\r\n\t\tdisplay:\"Clap 1\",\r\n\t},\r\n\t{\r\n\t\tid:\"e\",\r\n\t\tkeycode:69,\r\n\t\taudio:\"https://raw.githubusercontent.com/lysianel/FCC3-BuildDrum/master/public/drumSoundtrack/CYCdh_ElecK03-Clap02.wav\",\r\n\t\tdisplay:\"Clap 2\",\r\n\t},\r\n\t{\r\n\t\tid:\"a\",\r\n\t\tkeycode:65,\r\n\t\taudio:\"https://raw.githubusercontent.com/lysianel/FCC3-BuildDrum/master/public/drumSoundtrack/CYCdh_ElecK03-Kick01.wav\",\r\n\t\tdisplay:\"Kick 1\",\r\n\t},\r\n\t{\r\n\t\tid:\"s\",\r\n\t\tkeycode:83,\r\n\t\taudio:\"https://raw.githubusercontent.com/lysianel/FCC3-BuildDrum/master/public/drumSoundtrack/CYCdh_ElecK03-Kick02.wav\",\r\n\t\tdisplay:\"Kick 2\",\r\n\t},\r\n\t{\r\n\t\tid:\"d\",\r\n\t\tkeycode:68,\r\n\t\taudio:\"https://raw.githubusercontent.com/lysianel/FCC3-BuildDrum/master/public/drumSoundtrack/CYCdh_ElecK03-OpHat.wav\",\r\n\t\tdisplay:\"Open Hat\",\r\n\t}\r\n\t,{\r\n\t\tid:\"z\",\r\n\t\tkeycode:90,\r\n\t\taudio:\"https://raw.githubusercontent.com/lysianel/FCC3-BuildDrum/master/public/drumSoundtrack/CYCdh_ElecK03-Snr02.wav\",\r\n\t\tdisplay:\"Snare\",\r\n\t},\r\n\t{\r\n\t\tid:\"x\",\r\n\t\tkeycode:88,\r\n\t\taudio:\"https://raw.githubusercontent.com/lysianel/FCC3-BuildDrum/master/public/drumSoundtrack/CYCdh_ElecK03-Tom02.wav\",\r\n\t\tdisplay:\"Tom 1\",\r\n\t},\r\n\t{\r\n\t\tid:\"c\",\r\n\t\tkeycode:67,\r\n\t\taudio:\"https://raw.githubusercontent.com/lysianel/FCC3-BuildDrum/master/public/drumSoundtrack/CYCdh_ElecK03-Tom04.wav\",\r\n\t\tdisplay:\"Tom 2\",\r\n\t}\r\n];","import React, {Component} from 'react';\r\nimport {audioDatabase} from \"../shared/audioDatabase\";\r\n\r\nconst Display = (props) => {\r\n\treturn (\r\n\t\t<div id=\"display\" key=\"display\">\r\n\t\t\t{props.display}\r\n\t\t</div>\r\n\t);\r\n} \r\n\r\n\r\nconst DrumPadContainer = (props) => {\r\n\t\r\n\tconst drumpads = props.audioDatabase.map((pad) => {\r\n\t\treturn(\r\n\t\t\t<div className=\"drum-pad\" id={pad.display} key={pad.id} onClick={props.onClick} onKeyDown={props.onKeyDown}>\r\n\t\t\t\t{pad.id.toUpperCase()}\r\n\t\t\t\t<audio src={pad.audio} className=\"clip\" id={pad.id.toUpperCase()}></audio>\r\n\t\t\t</div>\r\n\t\t);\r\n\t})\r\n\r\n\treturn(\r\n\t\t<div id=\"drum-pad-container\" onKeyDown={props.handleKeyDown} >\r\n\t\t\t{drumpads}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nclass DrumMachine extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\taudioDatabase: audioDatabase,\r\n\t\t\tselectedAudio:''\r\n\t\t};\r\n\r\n\r\n\t\tthis.handleClick=this.handleClick.bind(this);\r\n\t\tthis.handleKeyDown=this.handleKeyDown.bind(this);\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n      document.addEventListener(\"keydown\", this.handleKeyDown);\r\n  \t}\r\n\r\n  \tcomponentWillUnmount() {\r\n      document.removeEventListener(\"keydown\", this.handleKeyDown);\r\n  \t}\r\n\r\n\thandleKeyDown(event){\r\n\t\tconst databaseChecked = this.state.audioDatabase.filter((track) => track.keycode === event.keyCode)[0];\r\n\t\tif (databaseChecked == null){\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedAudio: ''\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedAudio: databaseChecked\r\n\t\t\t})\r\n\t\tthis.playTrack(document.getElementById(this.state.selectedAudio.display));\r\n\t\t}\r\n\t}\r\n\r\n\thandleClick(event){\r\n\t\tthis.setState({\r\n\t\t\tselectedAudio:this.state.audioDatabase.filter((track) => track.display === event.target.id)[0]\r\n\t\t})\r\n\t\tthis.playTrack(event.target);\r\n\t}\r\n\r\n\tplayTrack(track){\r\n\t\t//remove active pads\r\n\t\tlet drumpads=document.getElementsByClassName('drum-pad active');\r\n\t\tif(drumpads.length !==0) {\r\n\t\t\tdrumpads[0].classList.remove(\"active\");\r\n\t\t}\r\n\t\t//play and activate current pad\r\n\t\t\tconsole.log(\"played\");\r\n\t\t\ttrack.classList.add('active');\r\n\t\t\ttrack.querySelector(\"audio\").play();\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div id=\"drum-machine\">\r\n\t\t\t\t<h1>Let's Play Drums</h1>\r\n\t\t\t\t<Display display={this.state.selectedAudio.display} />\r\n\t\t\t\t<DrumPadContainer audioDatabase={this.state.audioDatabase} onClick={this.handleClick} onKeyDown={this.handleKeyDown} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t};\r\n}\r\n\r\nexport default DrumMachine; ","import React from 'react';\nimport './App.css';\nimport DrumMachine from \"./components/DrumMachine\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <DrumMachine />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}